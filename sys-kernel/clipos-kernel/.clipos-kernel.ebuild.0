# Copyright Â© 2017 ANSSI. All rights reserved.
# Distributed under the terms of the GNU General Public License v2

EAPI=7
CROS_WORKON_PROJECT=(
	'external/linux'					# Linux kernel
	'platform/config-linux-hardware'	# Product's hardware configurations
)
CROS_WORKON_DESTDIR=(
	"${S}"
	"${S}/hardware"
)
CROS_WORKON_COMMIT=(
	'd29c4f9382155aac445d3dd8adb4b4b14e5f6f7f'	# v4.20.11-6663-gd29c4f9382155
	'af95a960276e728b5e43a9267c78c0b4f0b02fdc'	# head of master branch
)

inherit cros-workon eutils clipos-product-info

DESCRIPTION="Linux kernel and hardware configurations for CLIP OS"
HOMEPAGE="https://clip-os.org"
LICENSE="GPL-2"
SLOT="0"
KEYWORDS="amd64"
IUSE="debug ipv6 selinux"

MY_PV=$(ver_cut 1-2)
CONFIG_SUFFIX="${MY_PV}"

# Disable standard env flags for kernel compiles
CFLAGS=""
ASFLAGS=""
LDFLAGS=""
ARCH=${ARCH#~}
ARCH=${ARCH/x86/i386}
ARCH=${ARCH/amd64/x86_64}

# RDEPEND=""
# ${RDEPEND}
DEPEND="
	app-arch/lz4
	sys-apps/kmod[lzma]
	sys-apps/net-tools
	sys-devel/bc
	sys-devel/binutils
	sys-devel/gcc
	sys-devel/make
"

src_prepare() {
	local configsets=(
		basic
		boards
		cpu/intel
		cpu/x86_64
		graphics
		kvm_guest
		misc_drivers
		net/basic
		net/ipsec
		net/netfilter
		sound
		security/basic
		feature/linux-hardened
		feature/lockdown
		)
	if use debug; then
		ewarn "Setting DEBUG options"
		configsets+=(debug)
	fi
	if use ipv6; then
		configsets+=(
			net/ipv6
			net/ipsec_ipv6
			net/netfilter_ipv6
			)
	fi
	if use selinux; then
		configsets+=( security/selinux )
	fi
	generate_config "${configsets[@]}"

	# Workaround to prevent '+' sign from being appended to the local version
	touch "${S}/.scmversion"

	# Append revision and distro name to kernel local version
	set_opt "CONFIG_LOCALVERSION" \
		"\"$([[ $PR != "r0" ]] && echo "-${PR}")-$(get_shortname)\""

	# Set default security module
	if use selinux ; then
		set_opt "CONFIG_DEFAULT_SECURITY_SELINUX"
		set_opt "CONFIG_DEFAULT_SECURITY" "\"selinux\""
	else
		set_opt "CONFIG_DEFAULT_SECURITY_DAC"
		set_opt "CONFIG_DEFAULT_SECURITY" "\"\""
	fi

	# (Un)set some Kconfig options (that we cannot handle with the debug
	# configset because they are already set in other configsets) to ease
	# debugging
	if use debug ; then
		unset_opt "CONFIG_PANIC_ON_OOPS"
		set_opt "CONFIG_PANIC_TIMEOUT" "0"
	fi

	# Provide our own x509.genkey file for module signing
	cp "${FILESDIR}/x509.genkey" "${S}/certs/x509.genkey"

	eapply_user  # mandatory by EAPI=6
}

src_compile() {
	make ${MAKEOPTS} ARCH="${ARCH}" all \
		|| die "Kernel compilation failed."

	make ${MAKEOPTS} ARCH="${ARCH}" modules_prepare \
		|| die "Kernel modules compilation failed."
}

src_install() {
	# Compute the kernel version string to be used
	KERNEL_VERSIONSTRING="$(make -s kernelrelease)"
	einfo "Kernel version string is ${KERNEL_VERSIONSTRING}"

	# Install kernel image, System.map and configuration in /boot
	# (dracut will only grab the kernel image anyway)
	insinto "/boot"
	newins arch/x86/boot/bzImage "vmlinuz-${KERNEL_VERSIONSTRING}"
	dosym "vmlinuz-${KERNEL_VERSIONSTRING}" "/boot/vmlinuz"
	newins System.map "System.map-${KERNEL_VERSIONSTRING}"
	newins .config "config-${KERNEL_VERSIONSTRING}"

	# Install modules
	make ${MAKEOPTS} INSTALL_MOD_PATH="${D}" modules_install

	# By default (i.e. by using modules_install from the kernel's Makefile),
	# these 2 nodes are symlinks to the kernel sources directory. But this
	# directory won't exist outside of the temporary emerge working directory
	# and these 2 symlinks will be broken after install.
	rm -f "${D}/lib/modules/${KERNEL_VERSIONSTRING}/build" \
		"${D}/lib/modules/${KERNEL_VERSIONSTRING}/source"

	# Install hardware profiles
	local profilesdir="$(basename -- "${CROS_WORKON_DESTDIR[1]}")/profiles"
	local profile name core nb_main=0 nb_extra=0
	for profile in "${profilesdir}"/* ; do
		[[ -d "$profile" ]] || continue
		insinto "/usr/share/$profile" && doins "$profile/modules"
		name="$(basename -- "$profile")"
		core="${name//+}"
		core="${core//-}"
		if [ "$name" != "$core" ]; then
			let "nb_extra++" || :
		else
			let "nb_main++" || :
		fi
	done
	einfo "Installed ${nb_main} main configurations and ${nb_extra} derivatives"
}

set_opt() {
	local optname="${1:?optname argument is needed}"
	local optval="${2:-y}"  # default is yes

	einfo "Setting option ${optname} to ${optval}."
	sed -i -e "s/^${optname}=.*/${optname}=${optval}/" "${S}/.config"
	sed -i -e "s/^# ${optname} is not set.*/${optname}=${optval}/" "${S}/.config"
	grep -qE "^${optname}=${optval}" "${S}/.config" \
		|| echo "${optname}=${optval}" >> "${S}/.config"
}

unset_opt() {
	local optnamepat="${1:?optnamepat argument is needed}"
	local optmatch
	local found=0

	while read optmatch; do
		let found++ || true
		if [[ ${optmatch} == ${optnamepat} ]]; then
			einfo "Unsetting option ${optmatch}"
		else
			einfo "Unsetting option ${optmatch} matching pattern ${optnamepat}"
		fi
		sed -i -r "s/^${optmatch}=.*/# ${optmatch} is not set/" "${S}/.config"
	done < <(sed -n -r "s/^(${optnamepat})=.*/\1/p" "${S}/.config")

	if [[ ${found} -eq 0 ]]; then
		# Be sure to unset invisible option too
		einfo "Unsetting option ${optnamepat}"
		echo "# ${optnamepat} is not set" >> "${S}/.config"
	fi
}

# initial miniconfig idea from Rob Landley and Piotr Karbowski (foo-miniconfig)
generate_config() {
	local configdir="${CROS_WORKON_DESTDIR[1]}/kernel_config"
	local miniconfig_cat="$(emktemp)"
	local miniconfig_sort="$(emktemp)"
	local config
	local missing=()
	local unwanted=()

	einfo "Kernel configuration set:"
	for configset in "$@"; do
		if [[ -f "${configdir}/${configset}" ]]; then
			einfo "  ${configset}"
			cat "${configdir}/${configset}" >> "${miniconfig_cat}"
			for subconfigset in $(ls ${configdir}/${configset}-*); do
				# FIXME: removal of a config option in a new kernel version
				# is not handled. Theoretically an option removed from Kconfig
				# should have no impact anymore in the source code, but we
				# still might want to disable an option starting from a certain
				# kernel version (e.g. disable buggy option for kernels newer
				# than 4.x).
				version_compare "${subconfigset##*-}" "${CONFIG_SUFFIX}"
				if [[ $? -lt 3 ]]; then
					einfo "Adding ${subconfigset} configuration set"
					cat "${configdir}/${subconfigset}" \
						>> "${miniconfig_cat}"
				fi
			done 2>/dev/null
		else
			die "There is no ${configset} configuration set"
		fi
	done
	sort -u "${miniconfig_cat}" > "${miniconfig_sort}"
	rm "${miniconfig_cat}"

	pushd "${S}" >/dev/null
	make ARCH="${ARCH}" KCONFIG_ALLCONFIG="${miniconfig_sort}" allnoconfig

	# check consistency
	while read config; do
		if ! grep -q "^${config}\$" .config; then
			missing+=("${config}")
		fi
	done < "${miniconfig_sort}"
	if [[ "${#missing[@]}" -ne 0 ]]; then
		die "Missing ${#missing[@]} entry from ${miniconfig_sort}: ${missing[*]}"
	fi
	popd >/dev/null

	# check blacklisted options
	if ! use debug; then
		while read config; do
			if grep -q "^${config}=" "${S}/.config"; then
				unwanted+=("${config}")
			fi
		done < "${configdir}/blacklist"
		if [[ "${#unwanted[@]}" -ne 0 ]]; then
			die "${#unwanted[@]} entry blacklisted but appearing in final .config: ${unwanted[*]}"
		fi
	fi
}

# vim: set ts=4 sts=4 sw=4 noet:
